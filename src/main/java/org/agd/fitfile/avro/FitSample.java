/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.agd.fitfile.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FitSample extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6793391210772895069L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FitSample\",\"namespace\":\"org.agd.fitfile.avro\",\"fields\":[{\"name\":\"power\",\"type\":\"long\"},{\"name\":\"distance\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"position_lat\",\"type\":\"double\"},{\"name\":\"position_long\",\"type\":\"double\"},{\"name\":\"altitude\",\"type\":\"double\"},{\"name\":\"cadence\",\"type\":\"long\"},{\"name\":\"grade\",\"type\":\"double\"},{\"name\":\"heartRate\",\"type\":\"long\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<FitSample> ENCODER =
      new BinaryMessageEncoder<FitSample>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FitSample> DECODER =
      new BinaryMessageDecoder<FitSample>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FitSample> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FitSample> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FitSample> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FitSample>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FitSample to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FitSample from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FitSample instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FitSample fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long power;
   private double distance;
   private double speed;
   private double position_lat;
   private double position_long;
   private double altitude;
   private long cadence;
   private double grade;
   private long heartRate;
   private java.time.Instant timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FitSample() {}

  /**
   * All-args constructor.
   * @param power The new value for power
   * @param distance The new value for distance
   * @param speed The new value for speed
   * @param position_lat The new value for position_lat
   * @param position_long The new value for position_long
   * @param altitude The new value for altitude
   * @param cadence The new value for cadence
   * @param grade The new value for grade
   * @param heartRate The new value for heartRate
   * @param timestamp The new value for timestamp
   */
  public FitSample(java.lang.Long power, java.lang.Double distance, java.lang.Double speed, java.lang.Double position_lat, java.lang.Double position_long, java.lang.Double altitude, java.lang.Long cadence, java.lang.Double grade, java.lang.Long heartRate, java.time.Instant timestamp) {
    this.power = power;
    this.distance = distance;
    this.speed = speed;
    this.position_lat = position_lat;
    this.position_long = position_long;
    this.altitude = altitude;
    this.cadence = cadence;
    this.grade = grade;
    this.heartRate = heartRate;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return power;
    case 1: return distance;
    case 2: return speed;
    case 3: return position_lat;
    case 4: return position_long;
    case 5: return altitude;
    case 6: return cadence;
    case 7: return grade;
    case 8: return heartRate;
    case 9: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: power = (java.lang.Long)value$; break;
    case 1: distance = (java.lang.Double)value$; break;
    case 2: speed = (java.lang.Double)value$; break;
    case 3: position_lat = (java.lang.Double)value$; break;
    case 4: position_long = (java.lang.Double)value$; break;
    case 5: altitude = (java.lang.Double)value$; break;
    case 6: cadence = (java.lang.Long)value$; break;
    case 7: grade = (java.lang.Double)value$; break;
    case 8: heartRate = (java.lang.Long)value$; break;
    case 9: timestamp = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'power' field.
   * @return The value of the 'power' field.
   */
  public long getPower() {
    return power;
  }


  /**
   * Sets the value of the 'power' field.
   * @param value the value to set.
   */
  public void setPower(long value) {
    this.power = value;
  }

  /**
   * Gets the value of the 'distance' field.
   * @return The value of the 'distance' field.
   */
  public double getDistance() {
    return distance;
  }


  /**
   * Sets the value of the 'distance' field.
   * @param value the value to set.
   */
  public void setDistance(double value) {
    this.distance = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The value of the 'speed' field.
   */
  public double getSpeed() {
    return speed;
  }


  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'position_lat' field.
   * @return The value of the 'position_lat' field.
   */
  public double getPositionLat() {
    return position_lat;
  }


  /**
   * Sets the value of the 'position_lat' field.
   * @param value the value to set.
   */
  public void setPositionLat(double value) {
    this.position_lat = value;
  }

  /**
   * Gets the value of the 'position_long' field.
   * @return The value of the 'position_long' field.
   */
  public double getPositionLong() {
    return position_long;
  }


  /**
   * Sets the value of the 'position_long' field.
   * @param value the value to set.
   */
  public void setPositionLong(double value) {
    this.position_long = value;
  }

  /**
   * Gets the value of the 'altitude' field.
   * @return The value of the 'altitude' field.
   */
  public double getAltitude() {
    return altitude;
  }


  /**
   * Sets the value of the 'altitude' field.
   * @param value the value to set.
   */
  public void setAltitude(double value) {
    this.altitude = value;
  }

  /**
   * Gets the value of the 'cadence' field.
   * @return The value of the 'cadence' field.
   */
  public long getCadence() {
    return cadence;
  }


  /**
   * Sets the value of the 'cadence' field.
   * @param value the value to set.
   */
  public void setCadence(long value) {
    this.cadence = value;
  }

  /**
   * Gets the value of the 'grade' field.
   * @return The value of the 'grade' field.
   */
  public double getGrade() {
    return grade;
  }


  /**
   * Sets the value of the 'grade' field.
   * @param value the value to set.
   */
  public void setGrade(double value) {
    this.grade = value;
  }

  /**
   * Gets the value of the 'heartRate' field.
   * @return The value of the 'heartRate' field.
   */
  public long getHeartRate() {
    return heartRate;
  }


  /**
   * Sets the value of the 'heartRate' field.
   * @param value the value to set.
   */
  public void setHeartRate(long value) {
    this.heartRate = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new FitSample RecordBuilder.
   * @return A new FitSample RecordBuilder
   */
  public static org.agd.fitfile.avro.FitSample.Builder newBuilder() {
    return new org.agd.fitfile.avro.FitSample.Builder();
  }

  /**
   * Creates a new FitSample RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FitSample RecordBuilder
   */
  public static org.agd.fitfile.avro.FitSample.Builder newBuilder(org.agd.fitfile.avro.FitSample.Builder other) {
    if (other == null) {
      return new org.agd.fitfile.avro.FitSample.Builder();
    } else {
      return new org.agd.fitfile.avro.FitSample.Builder(other);
    }
  }

  /**
   * Creates a new FitSample RecordBuilder by copying an existing FitSample instance.
   * @param other The existing instance to copy.
   * @return A new FitSample RecordBuilder
   */
  public static org.agd.fitfile.avro.FitSample.Builder newBuilder(org.agd.fitfile.avro.FitSample other) {
    if (other == null) {
      return new org.agd.fitfile.avro.FitSample.Builder();
    } else {
      return new org.agd.fitfile.avro.FitSample.Builder(other);
    }
  }

  /**
   * RecordBuilder for FitSample instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FitSample>
    implements org.apache.avro.data.RecordBuilder<FitSample> {

    private long power;
    private double distance;
    private double speed;
    private double position_lat;
    private double position_long;
    private double altitude;
    private long cadence;
    private double grade;
    private long heartRate;
    private java.time.Instant timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.agd.fitfile.avro.FitSample.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.power)) {
        this.power = data().deepCopy(fields()[0].schema(), other.power);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.distance)) {
        this.distance = data().deepCopy(fields()[1].schema(), other.distance);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.speed)) {
        this.speed = data().deepCopy(fields()[2].schema(), other.speed);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.position_lat)) {
        this.position_lat = data().deepCopy(fields()[3].schema(), other.position_lat);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.position_long)) {
        this.position_long = data().deepCopy(fields()[4].schema(), other.position_long);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.altitude)) {
        this.altitude = data().deepCopy(fields()[5].schema(), other.altitude);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.cadence)) {
        this.cadence = data().deepCopy(fields()[6].schema(), other.cadence);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.grade)) {
        this.grade = data().deepCopy(fields()[7].schema(), other.grade);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.heartRate)) {
        this.heartRate = data().deepCopy(fields()[8].schema(), other.heartRate);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[9].schema(), other.timestamp);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing FitSample instance
     * @param other The existing instance to copy.
     */
    private Builder(org.agd.fitfile.avro.FitSample other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.power)) {
        this.power = data().deepCopy(fields()[0].schema(), other.power);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.distance)) {
        this.distance = data().deepCopy(fields()[1].schema(), other.distance);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.speed)) {
        this.speed = data().deepCopy(fields()[2].schema(), other.speed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.position_lat)) {
        this.position_lat = data().deepCopy(fields()[3].schema(), other.position_lat);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.position_long)) {
        this.position_long = data().deepCopy(fields()[4].schema(), other.position_long);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.altitude)) {
        this.altitude = data().deepCopy(fields()[5].schema(), other.altitude);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.cadence)) {
        this.cadence = data().deepCopy(fields()[6].schema(), other.cadence);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.grade)) {
        this.grade = data().deepCopy(fields()[7].schema(), other.grade);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.heartRate)) {
        this.heartRate = data().deepCopy(fields()[8].schema(), other.heartRate);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[9].schema(), other.timestamp);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'power' field.
      * @return The value.
      */
    public long getPower() {
      return power;
    }


    /**
      * Sets the value of the 'power' field.
      * @param value The value of 'power'.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder setPower(long value) {
      validate(fields()[0], value);
      this.power = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'power' field has been set.
      * @return True if the 'power' field has been set, false otherwise.
      */
    public boolean hasPower() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'power' field.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder clearPower() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'distance' field.
      * @return The value.
      */
    public double getDistance() {
      return distance;
    }


    /**
      * Sets the value of the 'distance' field.
      * @param value The value of 'distance'.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder setDistance(double value) {
      validate(fields()[1], value);
      this.distance = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'distance' field has been set.
      * @return True if the 'distance' field has been set, false otherwise.
      */
    public boolean hasDistance() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'distance' field.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder clearDistance() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public double getSpeed() {
      return speed;
    }


    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder setSpeed(double value) {
      validate(fields()[2], value);
      this.speed = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder clearSpeed() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'position_lat' field.
      * @return The value.
      */
    public double getPositionLat() {
      return position_lat;
    }


    /**
      * Sets the value of the 'position_lat' field.
      * @param value The value of 'position_lat'.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder setPositionLat(double value) {
      validate(fields()[3], value);
      this.position_lat = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'position_lat' field has been set.
      * @return True if the 'position_lat' field has been set, false otherwise.
      */
    public boolean hasPositionLat() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'position_lat' field.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder clearPositionLat() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'position_long' field.
      * @return The value.
      */
    public double getPositionLong() {
      return position_long;
    }


    /**
      * Sets the value of the 'position_long' field.
      * @param value The value of 'position_long'.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder setPositionLong(double value) {
      validate(fields()[4], value);
      this.position_long = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'position_long' field has been set.
      * @return True if the 'position_long' field has been set, false otherwise.
      */
    public boolean hasPositionLong() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'position_long' field.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder clearPositionLong() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'altitude' field.
      * @return The value.
      */
    public double getAltitude() {
      return altitude;
    }


    /**
      * Sets the value of the 'altitude' field.
      * @param value The value of 'altitude'.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder setAltitude(double value) {
      validate(fields()[5], value);
      this.altitude = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'altitude' field has been set.
      * @return True if the 'altitude' field has been set, false otherwise.
      */
    public boolean hasAltitude() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'altitude' field.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder clearAltitude() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'cadence' field.
      * @return The value.
      */
    public long getCadence() {
      return cadence;
    }


    /**
      * Sets the value of the 'cadence' field.
      * @param value The value of 'cadence'.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder setCadence(long value) {
      validate(fields()[6], value);
      this.cadence = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'cadence' field has been set.
      * @return True if the 'cadence' field has been set, false otherwise.
      */
    public boolean hasCadence() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'cadence' field.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder clearCadence() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'grade' field.
      * @return The value.
      */
    public double getGrade() {
      return grade;
    }


    /**
      * Sets the value of the 'grade' field.
      * @param value The value of 'grade'.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder setGrade(double value) {
      validate(fields()[7], value);
      this.grade = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'grade' field has been set.
      * @return True if the 'grade' field has been set, false otherwise.
      */
    public boolean hasGrade() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'grade' field.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder clearGrade() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'heartRate' field.
      * @return The value.
      */
    public long getHeartRate() {
      return heartRate;
    }


    /**
      * Sets the value of the 'heartRate' field.
      * @param value The value of 'heartRate'.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder setHeartRate(long value) {
      validate(fields()[8], value);
      this.heartRate = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'heartRate' field has been set.
      * @return True if the 'heartRate' field has been set, false otherwise.
      */
    public boolean hasHeartRate() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'heartRate' field.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder clearHeartRate() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[9], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public org.agd.fitfile.avro.FitSample.Builder clearTimestamp() {
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FitSample build() {
      try {
        FitSample record = new FitSample();
        record.power = fieldSetFlags()[0] ? this.power : (java.lang.Long) defaultValue(fields()[0]);
        record.distance = fieldSetFlags()[1] ? this.distance : (java.lang.Double) defaultValue(fields()[1]);
        record.speed = fieldSetFlags()[2] ? this.speed : (java.lang.Double) defaultValue(fields()[2]);
        record.position_lat = fieldSetFlags()[3] ? this.position_lat : (java.lang.Double) defaultValue(fields()[3]);
        record.position_long = fieldSetFlags()[4] ? this.position_long : (java.lang.Double) defaultValue(fields()[4]);
        record.altitude = fieldSetFlags()[5] ? this.altitude : (java.lang.Double) defaultValue(fields()[5]);
        record.cadence = fieldSetFlags()[6] ? this.cadence : (java.lang.Long) defaultValue(fields()[6]);
        record.grade = fieldSetFlags()[7] ? this.grade : (java.lang.Double) defaultValue(fields()[7]);
        record.heartRate = fieldSetFlags()[8] ? this.heartRate : (java.lang.Long) defaultValue(fields()[8]);
        record.timestamp = fieldSetFlags()[9] ? this.timestamp : (java.time.Instant) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FitSample>
    WRITER$ = (org.apache.avro.io.DatumWriter<FitSample>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FitSample>
    READER$ = (org.apache.avro.io.DatumReader<FitSample>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










